from sklearn.tree import DecisionTreeClassifier
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score

# Laden Sie den Wein-Datensatz
data = load_wine()
X = data.data
y = data.target

# Teilen Sie den Datensatz in Trainings- und Testdaten auf
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Definieren Sie die Parameter, die in der Grid Search optimiert werden sollen
param_grid = {'max_depth': [None, 5, 10, 15],
              'min_samples_split': [2, 5, 10],
              'criterion': ['gini', 'entropy']}

# Erstellen Sie den Entscheidungsbaum-Klassifikator
clf = DecisionTreeClassifier(random_state=42)

# Erstellen Sie die GridSearchCV-Instanz
grid_search = GridSearchCV(clf, param_grid, cv=5, scoring='accuracy')

# Führen Sie die Grid Search durch
grid_search.fit(X_train, y_train)

# Ausgabe der besten Parameter
print("Best parameters: ", grid_search.best_params_)

# Verwenden Sie den besten Klassifikator, um Vorhersagen für die Testdaten zu treffen
y_pred = grid_search.predict(X_test)

# Berechnen Sie die Genauigkeit des Modells
acc = accuracy_score(y_test, y_pred)
print("Accuracy:", acc)
